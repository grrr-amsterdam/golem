desc "Enable Under Construction status"
task :enable_under_construction do
	on roles(:web) do
		if fetch(:this_host_last_release)
    		# Previous release exists, update it to under construction
			execute "[ -f #{releases_path}/#{fetch(:this_host_last_release)}/garp/scripts/garp.php ] && php #{releases_path}/#{fetch(:this_host_last_release)}/garp/scripts/garp.php Env setUnderConstruction --e=#{fetch(:stage)}"
		end
	end
end

desc "Disable Under Construction status"
task :disable_under_construction do
	on roles(:web) do
		if fetch(:this_host_last_release)
			# Previous release exists, remove under construction flag
			execute "[ -f #{releases_path}/#{fetch(:this_host_last_release)}/garp/scripts/garp.php ] && php #{releases_path}/#{fetch(:this_host_last_release)}/garp/scripts/garp.php Env setUnderConstruction false --e=#{fetch(:stage)}"
		end
	end
end

desc "Spawn models"
task :spawn do
	# Since there is often a shared database server for multiple web servers,
	# we distinguish a primary server (with roles 'web' and 'app'),
	# and secondary servers (with just role 'web').
	# Only the primary server Spawns database changes, to prevent
	# race conditions and multiple clients simultaneously trying to update
	# the same tables and views.
	on roles(:app) do
		execute "php #{release_path}/garp/scripts/garp.php Spawn --only=db -b --e=#{fetch(:stage)}"
	end

	on roles(:web) do
		execute "php #{release_path}/garp/scripts/garp.php Spawn --only=files -b --e=#{fetch(:stage)}"
		execute "php #{release_path}/garp/scripts/garp.php cache clear --e=#{fetch(:stage)}"
	end
end

desc "Perform administrative tasks after deploy"
task :garp_env_setup do
	on roles(:app) do
		execute "php #{release_path}/garp/scripts/garp.php Env setup --e=#{fetch(:stage)}"
	end
end
